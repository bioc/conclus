% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-dbscan.R
\name{runDBSCAN,scRNAseq-method}
\alias{runDBSCAN,scRNAseq-method}
\alias{runDBSCAN}
\title{runDBSCAN}
\usage{
runDBSCAN(theObject, cores=2, epsilon=c(1.3, 1.4, 1.5), minPoints=c(3, 4),
writeOutput=FALSE)
}
\arguments{
\item{theObject}{An Object of class scRNASeq for which the count matrix was
normalized and the tSNE coordinates were calculated.
See ?normaliseCountMatrix and ?generateTSNECoordinates.}

\item{cores}{Maximum number of jobs that CONCLUS can run in parallel.
Default is 1.}

\item{epsilon}{Reachability distance parameter of fpc::dbscan() function.
See Ester et al. (1996) for more details. Default = c(1.3, 1.4, 1.5)}

\item{minPoints}{Reachability minimum no. of points parameter of
fpc::dbscan() function. See Ester et al. (1996) for more details.
Default = c(3, 4)}

\item{writeOutput}{If TRUE, write the results of the dbScan clustering to
the output directory defined in theObject, in the sub-directory
output_tables. Default = FALSE.}
}
\value{
An object of class scRNASeq with its dbscanList slot updated. Also writes
the clustering results in "dataDirectory/output_tables" subfolder if the
parameter writeOutput is TRUE.
}
\description{
Run clustering iterations with selected parameters using DBSCAN.
}
\details{
Following the calculation of t-SNE coordinates, DBSCAN is run with a range
of epsilon and MinPoints values which will yield a total of 84 clustering
solutions (PCs x perplexities x MinPoints x epsilon). *minPoints* is the
minimum cluster size which you assume to be meaningful for your experiment
and *epsilon* is the radius around the cell where the algorithm will try to
find *minPoints* dots. Optimal *epsilon* must lay one the knee of the k-NN
function as shown in the "test_clustering/distance_graph.pdf".
}
\examples{
## Load the count matrix
countmatrixPath <- system.file("extdata/test_countMatrix.tsv", 
                            package="conclus")
countMatrix <- loadCountMatrix(file=countmatrixPath, header=TRUE, dec=".",
                                sep='\t')

## Load the coldata
coldataPath <- system.file("extdata/test_colData_filtered.tsv", 
                            package="conclus")
columnsMetaData <- loadColdata(file=coldataPath, columnCell="cell_ID",
                                header=TRUE, dec=".", sep='\t')

## Create the initial object
scr <- singlecellRNAseq(experimentName = "Bergiers",
                countMatrix     = countMatrix,
                species         = "mouse",
                outputDirectory = "YourOutputDirectory")

## Normalize and filter the raw counts matrix
scrNorm <- normaliseCountMatrix(scr, coldata = columnsMetaData)

## Compute the tSNE coordinates
scrTsne <- generateTSNECoordinates(scrNorm, cores=2)

## Perform the clustering with dbScan
scrDbscan <- runDBSCAN(scrTsne, cores=2)

}
\seealso{
normaliseCountMatrix generateTSNECoordinates
}
\author{
Ilyess RACHEDI, based on code by Polina PAVLOVICH and Nicolas DESCOSTES.
}
